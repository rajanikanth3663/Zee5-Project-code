name: 'CD'

on:
  workflow_dispatch:
   inputs:
        directory:
          description: 'Name of the  working directory'     
          required: true
          default: 'src/uat/foldername'

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "xxxx-xxx-xxx-xx"
  TF_VAR_TFSTATE_RESOURCE_GROUP_NAME: "${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}"
  TF_VAR_TFSTATE_STORAGE_ACCOUNT_NAME: "${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}"
  TF_VAR_TFSTATE_STORAGE_ACCOUNT_KEY: "${{ secrets.TFSTATE_STORAGE_ACCOUNT_KEY }}"
  working-directory: '${{ github.event.inputs.directory }}'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest #privaterunner if needed
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Az CLI Login
    - name: Az CLI Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
    
    # # Add GitHub Runner IP to TFSTATE Firewall
    # - name: Add GitHub Runner IP to TFSTATE Firewall
    #   uses: azure/CLI@v1
    #   with:
    #     inlineScript: |
    #       runnerIP=$(wget -qO- https://api.ipify.org/)
    #       az storage account network-rule add \
    #         --resource-group "${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}" \
    #         --account-name "${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
    #         --ip-address $runnerIP
    #       sleep 45

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: "1.7.4"
        
    - name: Configure SSH
      run: |
        mkdir -p /home/runner/.ssh/
        sudo chown -R "runner:docker" /home/runner/.ssh/

    # Shared module access    
    - name: Setup SSH
      uses: MrSquaare/ssh-setup-action@v1
      with:
        host: github.com
        private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    #- uses: actions/checkout@v4
    #  with:
    #     repository: 'ZEE-5/azure-zeedigital-tf-modules'
    #     ref: 'uat'
    #     ssh-strict: false
    #     ssh-key: ${{ secrets.NEW_SSH_PRIVATE_KEY }}
    #     path: ./src/uat/shared/tfmodules
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

    #- name: run folder check
    #  shell: bash
    #  run: |
    #    ls -l
    #    pwd
    #    ls -l /home/runner/_work/azure-zee5-infra-spoke-nonprod

    - name: Terraform Init
      run: terraform -chdir=${{env.working-directory}} init -backend-config=resource_group_name="${{env.TF_VAR_TFSTATE_RESOURCE_GROUP_NAME}}" -backend-config=storage_account_name="${{env.TF_VAR_TFSTATE_STORAGE_ACCOUNT_NAME}}" -backend-config=access_key="${{env.TF_VAR_TFSTATE_STORAGE_ACCOUNT_KEY}}" -backend-config=subscription_id="${{ env.ARM_SUBSCRIPTION_ID }}"
    
    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform -chdir=${{env.working-directory}} fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |

        echo "Working directory: ${{ env.working-directory }}"


        export exitcode=0

        if [[ "${{ env.working-directory }}" == "src/uat/shared" || 
              "${{ env.working-directory }}" == "src/dev/shared" || 
              "${{ env.working-directory }}" == "src/qa/shared" ]]; then
          terraform -chdir=${{env.working-directory}} plan -detailed-exitcode -no-color -var vm_admin_password="${{ secrets.VM_ADMIN_PWD }}" \
          -var POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
          -var MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
          -var PAAS_SQL_PASSWORD="${{ secrets.PAAS_SQL_PASSWORD }}" \
          -var SQLMI_PASSWORD="${{ secrets.SQLMI_PASSWORD }}" \
          -out tfplan || export exitcode=$?
        else
          terraform -chdir=${{env.working-directory}} plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        fi

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: ${{env.working-directory}}/tfplan
        
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform -chdir=${{env.working-directory}} show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      continue-on-error: true # GITHUB_STEP_SUMMARY has a limit of 1MB, so this step may fail if the plan is too large
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    #If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/uat'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
 
    # # Remove GitHub Runner IP to TFSTATE Firewall
    # - name: Remove GitHub Runner IP to TFSTATE Firewall
    #   if: always()
    #   uses: azure/CLI@v1
    #   with:
    #     inlineScript: |
    #       runnerIP=$(wget -qO- https://api.ipify.org/)
    #       az storage account network-rule remove  \
    #         --resource-group "${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}" \
    #         --account-name "${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
    #         --ip-address $runnerIPE

    # Az CLI Logout
    - name: Az CLI Logout
      if: always()
      run: |
        az logout               
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/uat' && needs.terraform-plan.outputs.tfplanExitCode == 2
    # if: needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: demo
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Az CLI Login
    - name: Az CLI Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
    
    # # Add GitHub Runner IP to TFSTATE Firewall
    # - name: Add GitHub Runner IP to TFSTATE Firewall
    #   uses: azure/CLI@v1
    #   with:
    #     inlineScript: |
    #       runnerIP=$(wget -qO- https://api.ipify.org/)
    #       az storage account network-rule add \
    #         --resource-group "${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}" \
    #         --account-name "${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
    #         --ip-address $runnerIP
    #       sleep 45

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: "1.7.4"

    - name: Configure SSH
      run: |
        mkdir -p /home/runner/.ssh/
        sudo chown -R "runner:docker" /home/runner/.ssh/

    # Shared module access    
    - name: Setup SSH
      uses: MrSquaare/ssh-setup-action@v1
      with:
        host: github.com
        private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=${{env.working-directory}} init -backend-config=resource_group_name="${{env.TF_VAR_TFSTATE_RESOURCE_GROUP_NAME}}" -backend-config=storage_account_name="${{env.TF_VAR_TFSTATE_STORAGE_ACCOUNT_NAME}}" -backend-config=access_key="${{env.TF_VAR_TFSTATE_STORAGE_ACCOUNT_KEY}}" -backend-config=subscription_id="${{ env.ARM_SUBSCRIPTION_ID }}"

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ${{env.working-directory}}

    # Terraform Apply
    - name: Terraform Apply
      id: tf-apply
      run: terraform -chdir=${{env.working-directory}} apply -auto-approve tfplan

    # Snapshot the Terraform state
    - name: Snapshot the Terraform state
      if: steps.tf-apply.outcome == 'success'
      run : |
        export folder=`basename "${{env.working-directory}}"`
        export tfstatefilename="zeedigital-uat-$folder.tfstate"
        echo "Terraform statefile - $tfstatefilename"
        az storage blob snapshot \
            --account-name "${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
            --container-name "tfstate-0001" \
            --name "$tfstatefilename"

    # # Remove GitHub Runner IP to TFSTATE Firewall
    # - name: Remove GitHub Runner IP to TFSTATE Firewall
    #   if: always()
    #   uses: azure/CLI@v1
    #   with:
    #     inlineScript: |
    #       runnerIP=$(wget -qO- https://api.ipify.org/)
    #       az storage account network-rule remove  \
    #         --resource-group "${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}" \
    #         --account-name "${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" \
    #         --ip-address $runnerIP

    # Az CLI Logout
    - name: Az CLI Logout
      if: always()
      run: |
        az logout
